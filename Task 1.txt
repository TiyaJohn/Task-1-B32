1.
a.What is the difference between statically typed and 
dynamically typed languages?

Statically typed languages:

A language is do type checking 
(i.e. the process of verifying and enforcing the constraints 
of types) at compile-time as opposed to run-time.

The main advantage here is that all kinds of checking can 
be done by the compiler, and therefore a lot of trivial 
bugs are caught at a very early stage.

Examples: C, C++, Java, Rust, Go, Scala.

Dynamically Tyoed Languages:

Dynamically typed programming languages do type checking 
at run-time as opposed to compile-time.
This means that you as a programmer can write a 
little quicker because you do not have to specify 
types every time (unless using a statically-typed language 
with type inference).

Examples: Perl, Ruby, Python, PHP, JavaScript, Erlang

b.Scripting Language and Programming Language

Scripted languages:
Scripting languages are interpreted within another program. 
JavaScript is embedded within a browser and interpreted by 
that browser.

Examples of scripting languages
*JavaScript
*Perl
*Python

Advantages of Scripting languages:
*Simple – Scripting languages are easier to write than 
programming language.
*Fewer Lines of Code (LOC)

Programmed languages:
Programming languages like Java are compiled and not 
interpreted by another application in the same way.

Examples programming languages
*C
*C++ and
*Java

c.Programming Paradigms

A programming paradigm is a style, or “way,” of programming.
Some languages make it easy to write in some paradigms but not others.

*Imperative Programing
*Structured Programing
*Object Oriented Programming
*Declaritive Programing
*Fuctional Programing
*Logic and Constraint Programing


2.Write a blog on Difference between HTTP1.1 vs HTTP2

*HTTP2 is much faster and more reliable than HTTP1. 
*HTTP1 loads a single request for every TCP connection, 
*while HTTP2 avoids network delay by using multiplexing. 
*HTTP is a network delay sensitive protocol in the sense that if there 
 is less network delay, then the page loads faster.

3.Write a blog about objects and its internal representation in 
Javascript

An object is an abstract data type with the addition of polymorphism 
and inheritance. 

Objects, in JavaScript, is it’s most important data-type and forms 
the building blocks for modern JavaScript. 

*These objects are quite different from JavaScript’s primitive data-types
(Number, String, Boolean, null, undefined and symbol) 
in the sense that 

*while these primitive data-types all store a single value each 
(depending on their types).

An object, is a reference data type. 
Variables that are assigned a reference value are given a reference or 
a pointer to that value. 

That reference or pointer points to the location in memory where the 
object is stored. The variables don’t actually store the value.

OBJECTS AND PROPERTIES
The properties of an object define the characteristics of the object. 
You access the properties of an object with a simple dot-notation:

=> objectName.propertyName

Like all JavaScript variables, both the object name 
(which could be a normal variable) and 

property name are case sensitive. 
You can define a property by assigning it a value. 

For example, let’s create an object named myCar and give it properties 
named make, model, and year as follows:

=>var myCar = new Object();-->
=>myCar.make = 'Ford';
=>myCar.model = 'Mustang';
=>myCar.year = 1969;

Unassigned properties of an object are undefined (and not null).

=>myCar.color; // undefined

Properties of JavaScript objects can also be accessed or set using a 
bracket notation (for more details see property accessors). 
Objects are sometimes called associative arrays, since each property 
is associated with a string value that can be used to access it. 
So, for example, you could access the properties of the myCar object as 
follows:

myCar['make'] = 'Ford';
myCar['model'] = 'Mustang';
myCar['year'] = 1969;








